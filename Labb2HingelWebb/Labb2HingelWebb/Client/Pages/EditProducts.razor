@page "/EditProducts"
@using Labb2HingelWebb.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@inject HttpClient HttpClient
@attribute [Authorize]

<h3>EditProducts</h3>

@*<button class="btn btn-primary">NewProduct</button>*@
<button class="btn btn-primary" @onclick="DeleteProduct">Delete Selected Product</button>

<div class="container">
	<EditForm Model="ActiveProductDto" OnSubmit="UpdateProduct">
		<div class="form-control">
			<label>Name</label>
			<InputText @bind-Value="ActiveProductDto.ProductName"></InputText>
			<label>Description</label>
			<InputText @bind-Value="ActiveProductDto.ProductDescription"></InputText>
			@*<label>Type 1=Rock; 2=Stick; 3=Dirt; 4=None;s </label>
			<InputNumber @bind-Value="ActiveProductDto.ProductType"></InputNumber>*@
			<label>IsActive</label>
			<InputCheckbox @bind-Value="ActiveProductDto.IsActive"></InputCheckbox>
			<label>Price</label>
			<InputNumber @bind-Value="ActiveProductDto.Price"></InputNumber>
		</div>
		<button class="btn btn-primary">Send</button>
	</EditForm>
</div>

<div class="container">
	<EditForm Model="SearchResult" OnSubmit="FilterResults">
	<div class="form-control">
		<label>Enter search word</label>
		<InputText @bind-Value="SearchWord"></InputText>
		<label>Enter number of returns</label>
		<InputNumber @bind-Value="NoOfResults"></InputNumber>
		<label>Enter category</label>
	</div>
	<button class="btn btn-primary">search</button>
	</EditForm>
</div>
<br/>

<h3>Existing Products</h3>
<ul class="container">
	<Virtualize Items="SearchResult" Context="productDto">
		<li class="list-group">
			<div @onclick="() => SelectProduct(productDto)">
				@productDto.ProductName @productDto.Price
			</div>
		</li>
	</Virtualize>
</ul>


@code {

	public StoreProductDto ActiveProductDto { get; set; } = new StoreProductDto();
	public List<StoreProductDto> StoreProductDtos { get; set; } = new();
	public List<StoreProductDto> SearchResult { get; set; } = new();
	public string SearchWord { get; set; } = "";

	public int NoOfResults { get; set; } = 5;

	//ToDO: Lägga till kategori sökning:
	

	protected override async Task OnInitializedAsync()
	{
		await GetProducts();

		await base.OnInitializedAsync();
	}

	private async Task GetProducts()
	{
		//var response = await HttpClient.GetFromJsonAsync<StoreProductDto>(HttpClient.BaseAddress + "getProductByName/Soil");

		var result = await HttpClient.GetFromJsonAsync<StoreProductDto[]>(HttpClient.BaseAddress + "getAllProducts");

		//var result = await HttpClient.GetFromJsonAsync<IEnumerable<StoreProductDto>>(HttpClient.BaseAddress + "getAllProducts");
		
		if (result == null)
			return;

		StoreProductDtos = result.ToList();
		
		//StoreProductDtos.Add(response);

		FilterResults();
		
	}

	private void FilterResults()
	{
		if (SearchWord != "")
		{
			SearchResult = StoreProductDtos.Where(p => p.ProductName.ToLower().Contains(SearchWord.ToLower())).Take(NoOfResults).ToList();
		}

		else
		{
			SearchResult = StoreProductDtos.Take(NoOfResults).ToList();
		}

		//ToDO: Lägga till Typsökning också.

		//StateHasChanged(); //Behövs denna?
	}

	//Den selekterade produkten i listan
	private void SelectProduct(StoreProductDto selectedProductDto)
	{
		ActiveProductDto = selectedProductDto;

		//Kanske behöver uppdatera fälten p.n.s.
	}

	//När produkten ska uppdateras eller läggas till ny.
	private async Task UpdateProduct()
	{
		await HttpClient.PostAsJsonAsync<StoreProductDto>(HttpClient.BaseAddress + "addStoreProduct", ActiveProductDto);

		await GetProducts();
	}

	//TODO: Metod för att ta bort en produkt ur stortimentet.
	private async Task DeleteProduct()
	{
		if(ActiveProductDto == null)
			return;

		await HttpClient.DeleteAsync(HttpClient.BaseAddress + $"deleteProduct/{ActiveProductDto.ProductName}");

		await GetProducts();
	}
}